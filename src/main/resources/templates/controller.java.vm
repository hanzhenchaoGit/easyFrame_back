package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.frank.boot.controller.base.BaseController;
import com.frank.boot.domain.system.ResultData;
import com.frank.boot.exception.PagerException;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
/**
 * ${cfg.ModuleName} Controller
 * @author ${author}
 * @since ${date}
 */

#set($codeTypes = ${cfg.codeTypes})
#set($selectPager = ${cfg.selectPager})
#set($selectList = ${cfg.selectList})
@RestController
@RequestMapping("/${cfg.ModuleName}")
public class ${table.controllerName} extends BaseController{
    @Autowired
    public ${table.serviceName} i${entity}Service;

#if($codeTypes.indexOf("addAndUpdate") > -1)
    @PostMapping("/add${entity}")
    public ResultData add(@RequestBody ${entity} i${entity}) {
        i${entity}Service.saveOrUpdate(i${entity});
        return new ResultData();
    }
#end
#if($codeTypes.indexOf("selectPager") > -1)
    @GetMapping("/get${entity}ByPager")
    public ResultData get${entity}ListByPager() throws PagerException {
        QueryWrapper<${entity}> query = new QueryWrapper<>();
#if($selectPager!="")
#set($pageParams = $selectPager.split(","))
#foreach($params in $pageParams )
#set($pageParamName = $params.split("@@")[0])
#if($params.split("@@")[1].equals("like"))
        if(!StringUtils.isEmpty(getString("$pageParamName"))){
          query.like("$pageParamName",getString("$pageParamName"));
        }
#elseif($params.split("@@")[1].equals("eq"))
        if(!StringUtils.isEmpty(getString("$pageParamName"))){
          query.eq("$pageParamName",getString("$pageParamName"));
        }
#end
#end
#end
        return new ResultData(i${entity}Service.selectPage(getPager(),query),getPager());
    }
#end
#if($codeTypes.indexOf("selectList") > -1)
    @GetMapping("/get${entity}List")
    public ResultData get${entity}List(){
        QueryWrapper<${entity}> query = new QueryWrapper<>();
#if($selectList!="")
#set($listParams = $selectList.split(","))
#foreach($params in $listParams )
#set($paramName = $params.split("@@")[0])
#if($params.split("@@")[1].equals("like"))
        if(!StringUtils.isEmpty(getString("$paramName"))){
          query.like("$paramName",getString("$paramName"));
        }
#elseif($params.split("@@")[1].equals("eq"))
        if(!StringUtils.isEmpty(getString("$paramName"))){
          query.eq("$paramName",getString("$paramName"));
        }
#end
#end
#end
        return new ResultData(i${entity}Service.selectList(query));
    }
#end
#if($codeTypes.indexOf("del") > -1)
    @GetMapping("/del${entity}")
    public ResultData del(@RequestParam Integer id) {
        i${entity}Service.removeById(id);
        return new ResultData();
    }
#end
}

